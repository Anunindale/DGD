/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package emc.forms.debtors.display.basket;

import emc.app.components.emcJButton;
import emc.app.components.emcJPanel;
import emc.app.components.emcJSplitPane;
import emc.app.components.emcJTabbedPane;
import emc.app.components.emcSetGridBagConstraints;
import emc.app.components.emcTablePanelUpdate;
import emc.app.components.emctable.emcDataRelationManagerUpdate;
import emc.app.components.emctable.emcGenericDataSourceUpdate;
import emc.app.components.emctable.emcJTableUpdate;
import emc.app.components.emctable.emcTableModelUpdate;
import emc.app.components.jtablelookup.EMCLookupJTableComponent;
import emc.app.components.lookup.popup.EMCLookupPopup;
import emc.app.scrollabledesktop.BaseInternalFrame;
import emc.entity.debtors.DebtorsBasketLines;
import emc.entity.debtors.DebtorsBasketMaster;
import emc.entity.debtors.DebtorsCustomerInvoiceMaster;
import emc.entity.inventory.InventoryItemMaster;
import emc.entity.sop.SOPCustomers;
import emc.enums.modules.enumEMCModules;
import emc.framework.EMCUserData;
import emc.menus.debtors.menuitems.display.DebtorsBasketMI;
import emc.menus.inventory.menuitems.display.ItemMaster;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JSplitPane;

/**
 *
 * @author stuart
 */
public class DebtorsBasketForm extends BaseInternalFrame {

    private emcDataRelationManagerUpdate drmMaster;
    private emcDataRelationManagerUpdate drmLines;

    public DebtorsBasketForm(EMCUserData userData) {
        super("Basket", true, true, true, true, userData);
        this.setBounds(20, 20, 650, 650);
        EMCUserData linesUD = userData.copyUserData();
        drmMaster = new emcDataRelationManagerUpdate(new emcGenericDataSourceUpdate(new DebtorsBasketMaster(), userData), userData);
        drmLines = new emcDataRelationManagerUpdate(new emcGenericDataSourceUpdate(new DebtorsBasketLines(), linesUD), linesUD);
        drmMaster.setTheForm(this);
        drmLines.setTheForm(this);
        this.setDataManager(drmMaster);
        drmMaster.setHeaderColumnID("basketId");
        drmMaster.setFormTextId1("basketId");
        drmMaster.setFormTextId2("customerId");
        drmMaster.setLinesTable(drmLines);
        drmLines.setRelationColumnToHeader("basketId");
        drmLines.setFormTextId1("basketId");
        drmLines.setFormTextId2("lineNumber");
        drmLines.setHeaderTable(drmMaster);
        this.initFrame();

    }

    private void initFrame() {
        emcJTabbedPane masterTabs = createMasterTabs();
        masterTabs.setRelationManager(drmMaster);
        emcJPanel pnlMaster = new emcJPanel();
        pnlMaster.setLayout(new BorderLayout());
        pnlMaster.add(masterTabs, BorderLayout.CENTER);
        pnlMaster.add(createMasterButtons(), BorderLayout.EAST);

        emcJTabbedPane linesTab = createLinesTabs();
        linesTab.setRelationManager(drmLines);
        emcJPanel pnlLines = new emcJPanel(new BorderLayout());
        pnlLines.add(linesTab, BorderLayout.CENTER);

        emcJSplitPane topBottomSplit = new emcJSplitPane(JSplitPane.VERTICAL_SPLIT, pnlMaster, pnlLines);
        topBottomSplit.setDividerSize(8);
        topBottomSplit.setContinuousLayout(true);
        topBottomSplit.setOneTouchExpandable(false);
        topBottomSplit.setDividerLocation(250);

        this.add(topBottomSplit, BorderLayout.CENTER);
    }

    private Component createMasterOverviewTab() {
        emcJPanel panel = new emcJPanel(new GridLayout(1, 1));
        List<String> keys = new ArrayList<String>();
        keys.add("basketId");
        keys.add("sessionId");
        keys.add("customerId");
        keys.add("invoiceId");
        keys.add("status");
        emcTableModelUpdate model = new emcTableModelUpdate(drmMaster, keys);
        emcJTableUpdate table = new emcJTableUpdate(model);

        EMCLookupJTableComponent lkpCustomer = new EMCLookupJTableComponent(new DebtorsBasketMI());
        lkpCustomer.setPopup(new EMCLookupPopup(new SOPCustomers(), "customerId", getUserData()));
        table.setLookupToColumn("customerId", lkpCustomer);

        EMCLookupJTableComponent lkpInvoiceId = new EMCLookupJTableComponent(new DebtorsBasketMI());
        lkpInvoiceId.setPopup(new EMCLookupPopup(new DebtorsCustomerInvoiceMaster(), "invoiceId", getUserData()));
        table.setLookupToColumn("invoiceId", lkpInvoiceId);

        drmMaster.setMainTableComponent(table);
        emcTablePanelUpdate tableScroll = new emcTablePanelUpdate(table);
        drmMaster.setTablePanel(tableScroll);
        panel.add(tableScroll);
        return panel;
    }

    private Component createMasterButtons() {
        List<emcJButton> buttons = new ArrayList<emcJButton>();
        buttons.add(new emcJButton("Invoice Basket") {
            @Override
            public void doActionPerformed(ActionEvent evt) {
                throw new UnsupportedOperationException("Not yet implemented");
            }
        });
        return emcSetGridBagConstraints.createButtonPanel(buttons);
    }

    private emcJTabbedPane createMasterTabs() {
        emcJTabbedPane masterTabs = new emcJTabbedPane();
        masterTabs.add("Overview", createMasterOverviewTab());
        return masterTabs;

    }

    private emcJTabbedPane createLinesTabs() {
        emcJTabbedPane linesTabs = new emcJTabbedPane();
        linesTabs.add("Overview", createLinesOverviewTab());
        return linesTabs;
    }

    private Component createLinesOverviewTab() {
        emcJPanel panel = new emcJPanel(new GridLayout(1, 1));
        List<String> keys = new ArrayList<String>();
        keys.add("lineNumber");
        keys.add("itemId");
        keys.add("printQty");
        keys.add("configuration");
        keys.add("colour");
        keys.add("size");
        keys.add("quantity");
        keys.add("price");
        keys.add("vat");
        keys.add("totalPrice");
  
        emcTableModelUpdate model = new emcTableModelUpdate(drmLines, keys);
        emcJTableUpdate table = new emcJTableUpdate(model);
        EMCLookupJTableComponent lkpItem = new EMCLookupJTableComponent(new ItemMaster());
        lkpItem.setPopup(new EMCLookupPopup(new InventoryItemMaster(), "itemId", drmLines.getUserData()));
        table.setLookupToColumn("itemId", lkpItem);


        drmLines.setMainTableComponent(table);
        emcTablePanelUpdate tableScroll = new emcTablePanelUpdate(table);
        drmLines.setTablePanel(tableScroll);
        panel.add(tableScroll);
        return panel;
    }
}
