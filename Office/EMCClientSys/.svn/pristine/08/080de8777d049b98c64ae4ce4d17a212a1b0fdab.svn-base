/*
 * EnumMethodMaker.emcJava
 *
 * Created on 08 July 2008, 09:08
 */

package emc.forms.developertools.display.enummethodmaker;

import emc.app.scrollabledesktop.BaseInternalFrame;
import emc.framework.EMCUserData;
import javax.swing.GroupLayout;
import javax.swing.JOptionPane;
import javax.swing.LayoutStyle;

/**
 *
 * @author  riaan
 */
public class EnumMethodMaker extends BaseInternalFrame {
    
    /** Creates new form EnumMethodMaker */
    public EnumMethodMaker(EMCUserData userData) {
        super("Enum Method Writer", true, true,true, true, userData);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lblTable = new emc.app.components.emcJLabel();
        lblStartingId = new emc.app.components.emcJLabel();
        lblEnumMethods = new emc.app.components.emcJLabel();
        txtTable = new emc.app.components.emcJTextField();
        btnMakeCode = new emc.app.components.emcJButton();
        txtStartId = new emc.app.components.emcJTextField();        
        txaGeneratedCode = new emc.app.components.emcJTextArea();
        codePane = new emc.app.components.emcJScrollPane(txaGeneratedCode);

        lblTable.setText("Table:");

        lblStartingId.setText("Starting ID:");

        lblEnumMethods.setText("Enum Methods:");

        btnMakeCode.setText("Write my Code!");
        btnMakeCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeCodeActionPerformed(evt);
            }
        });

        txaGeneratedCode.setColumns(20);
        txaGeneratedCode.setEditable(false);
        txaGeneratedCode.setRows(5);
        codePane.setViewportView(txaGeneratedCode);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(codePane, GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTable)
                        .addGap(18, 18, 18)
                        .addComponent(txtTable, GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStartingId)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStartId, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE))
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblEnumMethods))
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(btnMakeCode, GroupLayout.PREFERRED_SIZE, 178, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTable)
                    .addComponent(lblStartingId)
                    .addComponent(txtTable, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStartId, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMakeCode)
                .addGap(18, 18, 18)
                .addComponent(lblEnumMethods)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codePane, GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void btnMakeCodeActionPerformed(java.awt.event.ActionEvent evt) {                                            
        try {
            int startId = Integer.parseInt(txtStartId.getText());
            String table = txtTable.getText();
            
            txaGeneratedCode.setText(makeEnumCode(table, startId));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Starting ID must be a positive integer value");
        }
    }                                           
    
    //Generate code
    private String makeEnumCode(String table, int startId) {
        StringBuilder ret = new StringBuilder("//" + table + "\n");
        
        int curId = startId;
        
        String curMethod = "INSERT_" + table.toUpperCase();
        ret.append(curMethod + "(" + curId + ", \"" + curMethod + "\"),\n");
        curId++;
        
        curMethod = "UPDATE_" + table.toUpperCase();
        ret.append(curMethod + "(" + curId + ", \"" + curMethod + "\"),\n");
        curId++;
        
        curMethod = "DELETE_" + table.toUpperCase();
        ret.append(curMethod + "(" + curId + ", \"" + curMethod + "\"),\n");
        curId++;
        
        curMethod = "GETNUMROWS_" + table.toUpperCase();
        ret.append(curMethod + "(" + curId + ", \"" + curMethod + "\"),\n");
        curId++;
        
        curMethod = "GETDATA_" + table.toUpperCase();
        ret.append(curMethod + "(" + curId + ", \"" + curMethod + "\"),\n");
        curId++;
        
        curMethod = "VALIDATEFIELD_" + table.toUpperCase();
        ret.append(curMethod + "(" + curId + ", \"" + curMethod + "\");\n");
        curId++;
        
        return ret.toString();
    }
    
    // Variables declaration - do not modify                     
    private emc.app.components.emcJButton btnMakeCode;
    private emc.app.components.emcJScrollPane codePane;
    private emc.app.components.emcJLabel lblEnumMethods;
    private emc.app.components.emcJLabel lblStartingId;
    private emc.app.components.emcJLabel lblTable;
    private emc.app.components.emcJTextArea txaGeneratedCode;
    private emc.app.components.emcJTextField txtStartId;
    private emc.app.components.emcJTextField txtTable;
    // End of variables declaration                   
    
}
