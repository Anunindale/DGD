/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package emc.reports.trec.treccard;

import emc.bus.trec.parameters.TRECParametersLocal;
import emc.entity.trec.TRECChemicals;
import emc.entity.trec.TRECChemicalsSuper;
import emc.entity.trec.TRECClasses;
import emc.entity.trec.TRECColours;
import emc.entity.trec.TRECCustomerChemicals;
import emc.entity.trec.TRECForms;
import emc.entity.trec.TRECOdours;
import emc.entity.trec.TRECPhrases;
import emc.entity.trec.TRECTrecCardsLines;
import emc.enums.emcquery.EMCQueryBracketConditions;
import emc.enums.enumQueryTypes;
import emc.enums.trec.TRECSpecialPrintEnum;
import emc.framework.EMCQuery;
import emc.framework.EMCReportBean;
import emc.framework.EMCUserData;
import emc.functions.Functions;
import java.io.File;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.ejb.Stateless;

/**
 *
 * @author wikus
 */
@Stateless
public class TRECTrecCardBean extends EMCReportBean implements TRECTrecCardLocal {

    @EJB
    private TRECParametersLocal paramBean;

    @Override
    public List<Object> manipulateQueryResult(List<Object> queryResult, java.util.Map<java.lang.String, java.lang.Object> paramMap, EMCUserData userData) {
        TRECTrecCardsLines line;
        TRECTrecCardDS ds;
        EMCQuery query;
        TRECChemicalsSuper chemical;
        String phraseString = null;
        List dataList = new ArrayList();

        boolean printLines = (Boolean) paramMap.get("printLines");
        boolean printExpiryDateBold = (Boolean) paramMap.get("boldExpDate");
        String filePath = (String) paramMap.get("clasPicPath");
        String printHazardZoneS = (String) paramMap.get("printHazardZone");
        String hazardPic1Path = (String) paramMap.get("hazardPic1Path");
        String hazardPic2Path = (String) paramMap.get("hazardPic2Path");
        boolean printHazardZone = false;

        Boolean ignoreApproval = (Boolean) paramMap.get("ignoreApproval");
        if (ignoreApproval == null) {
            ignoreApproval = false;
        }

        List<Object[]> chemicalPhrasesList;
        Object[] chemicalPhrases;

        if (printHazardZoneS != null) {
            if (printHazardZoneS.equals("")) {
                printHazardZoneS = paramBean.getParameterRecord(userData).getPrintHazZone();
            }

            switch (TRECSpecialPrintEnum.fromString(printHazardZoneS)) {
                case NONE:
                    printHazardZone = false;
                    filePath = "";
                    hazardPic1Path = "";
                    hazardPic2Path = "";//clear paths
                    break;
                case PRINT_DIAMOND:
                    printHazardZone = false;
                    break;
                case PRINT_PLACCARD:
                    printHazardZone = true;
                    break;
            }
        } else {
            //handle as none
            printHazardZone = false;
            filePath = "";
            hazardPic1Path = "";
            hazardPic2Path = "";//clear paths
        }

        String seperator = File.separator;
        if (!isBlank(filePath)) {
            if (filePath.contains("/")) {
                seperator = "/";
            } else if (filePath.contains("\\")) {
                seperator = "\\";
            }
        }


        boolean printExpiryDate = paramBean.getParameterRecord(userData).isPrintExpiryDate();
        Date expiryDate = null;
        if (printExpiryDate) {
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.YEAR, 3);
            expiryDate = cal.getTime();
        }

        for (Object o : queryResult) {
            line = (TRECTrecCardsLines) o;


            if (!ignoreApproval && !line.isApproved()) {
                Logger.getLogger("emc").log(Level.SEVERE, "The TREC Line for UN" + line.getUnNumber() + " has not been approved yet.", userData);
                continue;
            }

            ds = new TRECTrecCardDS();
            ds.setUNNumber(line.getUnNumber());
            ds.setPreparedBy(line.getPreparedBy());
            ds.setPackingGroup(line.getPackingGroup());
            ds.setAppearance(getAppearanceString(line.getForm(), line.getColour(), line.getOdour(), userData));
            ds.setEmergencyPhoneNumber(line.getEmergencyNumber());
            ds.setAdditionalInfo(isBlank(line.getAdditionalInfo()) ? "" : line.getAdditionalInfo().replaceAll("\n", "<br />"));

//            if (printExpiryDate) {
//                ds.setAdditionalInfo((isBlank(ds.getAdditionalInfo()) ? "" : ds.getAdditionalInfo() + "<br /><br />") + (printExpiryDateBold ? "<b>" : "") + "Expiry Date: " + Functions.date2String(expiryDate, "yyyy-MM-dd") + (printExpiryDateBold ? "</b>" : ""));
//            }
            //Chemical
            if (line.getCustomerChemical() != 0) {
                query = new EMCQuery(enumQueryTypes.SELECT, TRECCustomerChemicals.class);
                query.addAnd("recordID", line.getCustomerChemical());

                chemical = (TRECCustomerChemicals) util.executeSingleResultQuery(query, userData);

            } else {
                query = new EMCQuery(enumQueryTypes.SELECT, TRECChemicals.class);
                query.addAnd("unNumber", line.getUnNumber());
                query.addAnd("shippingName", line.getProperShipping());

                chemical = (TRECChemicals) util.executeSingleResultQuery(query, userData);
            }

            if (chemical == null) {
                Logger.getLogger("emc").log(Level.SEVERE, "Failed to get the chemical record.", userData);
                return new ArrayList<Object>();
            }


            query = new EMCQuery(enumQueryTypes.SELECT, TRECChemicals.class);
            query.addAnd("unNumber", line.getUnNumber());
            query.addAnd("shippingName", line.getProperShipping());
            TRECChemicals chem = (TRECChemicals) util.executeSingleResultQuery(query, userData);

            //set additional shipping name on additional info
            if (!isBlank(chemical.getAddShippingName())) {
                ds.setAdditionalInfo(isBlank(ds.getAdditionalInfo()) == true ? "" + chemical.getAddShippingName() : ds.getAdditionalInfo() + "<br />" + chemical.getAddShippingName());
            }
            ds.setErgNumber(chemical.getErg());
            ds.setChemicalClass(chemical.getClassId());
            ds.setProperShippingName(chemical.getShippingName());
            ds.setSubsudiaryRisk(chemical.getSubsidairyRisk());
            ds.setClassPicPath(isBlank(filePath) ? null : filePath + seperator + chemical.getClassId() + ".png");
            ds.setPrintHazardZone(printHazardZone);
            ds.setExpiryDate(Functions.date2String(expiryDate, "dd-MM-yyyy"));

            // Additinal info 
            if (!isBlank(line.getTradingName())) {
                ds.setAddInfoHeading1("TRADE NAME : "+line.getTradingName());
                ds.setPrint1(true);
            } else if (!isBlank(chem.getAddShippingName())) {
                ds.setAddInfoHeading1(chem.getAddShippingName());
                ds.setPrint1(true);
            } else if (!isBlank(line.getAdditionalInfo())) {
                ds.setAddInfoHeading1(line.getAdditionalInfo());
                ds.setPrint1(true);
            }

            if (ds.isPrint1()) {
                if(ds.getAddInfoHeading1().equalsIgnoreCase("TRADE NAME : "+line.getTradingName())){
                        if (!isBlank(chem.getAddShippingName())) {
                            //ds.setAddInfoHeading1(null);
                            ds.setAddInfoHeading2(chem.getAddShippingName());
                            ds.setPrint2(true);
                        } else if (!isBlank(line.getAdditionalInfo())) {
                            // ds.setAddInfoHeading1(null);
                            ds.setAddInfoHeading2(line.getAdditionalInfo());
                            ds.setPrint2(true);
                        }  
                }else if(ds.getAddInfoHeading1().equalsIgnoreCase(chem.getAddShippingName())){
                    if (!isBlank(line.getAdditionalInfo())) {
                            // ds.setAddInfoHeading1(null);
                            ds.setAddInfoHeading2(line.getAdditionalInfo());
                            ds.setPrint2(true);
                        }  
                } else if(ds.getAddInfoHeading1().equalsIgnoreCase(line.getAdditionalInfo())){
                    //do nothing
                }
            }
            
            if (ds.isPrint2()) {
                if(ds.getAddInfoHeading2().equalsIgnoreCase(chem.getAddShippingName())){
                    ds.setAddInfoHeading3(line.getAdditionalInfo());
                    ds.setPrint3(true);
                }else{
                    //do nothing
                }
                
                
            }


//            if (!isBlank(ds.getTradeName())) {
//                ds.setTradeNameB(true);
//            }
//            if (!isBlank(ds.getAdditionalInfo())) {
//                ds.setAdditionalInfoB(true);
//            }
//            if (!isBlank(ds.getShippingName())) {
//                ds.setShippingNameB(true);
//            }


            String subRisk = chemical.getSubsidairyRisk();
            String risk1 = null;
            String risk2 = null;

            if (printHazardZone && !isBlank(subRisk)) {
                if (subRisk.contains(";")) {
                    subRisk = subRisk.substring(subRisk.indexOf(";") + 1);
                }

                subRisk = subRisk.replaceAll("and", "AND");
                String[] riskArray = subRisk.split("AND");

                if (riskArray.length > 0) {
                    risk1 = riskArray[0].trim();
                }

                if (riskArray.length > 1) {
                    risk2 = riskArray[1].trim();
                }

                if (!isBlank(risk1)) {
                    ds.setHazardPic1Path(hazardPic1Path + seperator + risk1 + ".png");
                }
                if (!isBlank(risk2)) {
                    ds.setHazardPic2Path(hazardPic2Path + seperator + risk2 + ".png");
                }
            }


            /////////////////////////////////////////////////////////////////////////////////////////
            //get Class
            EMCQuery classQ = new EMCQuery(enumQueryTypes.SELECT, TRECClasses.class);
            classQ.addAnd("classId", chemical.getClassId());
            TRECClasses theClass = (TRECClasses) util.executeSingleResultQuery(classQ, userData);
            Double qty = 0.0;
            if (isBlank(line.getPackingGroup()) || line.getPackingGroup().equals("I")) {
                if (util.compareDouble(chemical.getRisk1(), 0.0) == 0) {
                    if (theClass != null) {
                        qty = theClass.getPackGrp1Threshold();
                    }
                } else {
                    qty = chemical.getRisk1();
                }


            } else if (line.getPackingGroup().equals("II")) {
                if (util.compareDouble(chemical.getRisk2(), 0.0) == 0) {
                    if (theClass != null) {
                        qty = theClass.getPackGrp2Threshold();
                    }
                } else {
                    qty = chemical.getRisk2();
                }

            } else if (line.getPackingGroup().equals("III")) {
                if (util.compareDouble(chemical.getRisk3(), 0.0) == 0) {
                    if (theClass != null) {
                        qty = theClass.getPackGrp3Threshold();
                    }
                } else {
                    qty = chemical.getRisk3();
                }

            }
            if (qty < 0) {
                qty = 0.0;
            }
            BigDecimal toRet = util.getBigDecimal(qty, 0);
            ds.setExemptQuantity(toRet.toString());
            /////////////////////////////////////////////////////////////////////////////////
            //Get Chemical Phrases
            query = new EMCQuery(enumQueryTypes.SELECT, chemical.getClass());
            query.addAnd("recordID", chemical.getRecordID());
            query.addFieldDecrypt("hPhrases", "tr3ck3y");
            query.addFieldDecrypt("pPhrases", "tr3ck3y");
            query.addFieldDecrypt("qPhrases", "tr3ck3y");
            query.addFieldDecrypt("dPhrases", "tr3ck3y");
            query.addFieldDecrypt("sPhrases", "tr3ck3y");
            query.addFieldDecrypt("fPhrases", "tr3ck3y");
            query.addFieldDecrypt("aPhrases", "tr3ck3y");
            query.addFieldDecrypt("ePhrases", "tr3ck3y");

            chemicalPhrasesList = util.executeNativeQuery(query, userData);

            if (chemicalPhrasesList != null && !chemicalPhrasesList.isEmpty()) {
                chemicalPhrases = chemicalPhrasesList.get(0);

                //H Phrases
                if (chemicalPhrases[0] != null) {
                    if (chemicalPhrases[0] instanceof String) {
                        phraseString = (String) chemicalPhrases[0];
                    } else {
                        phraseString = new String((byte[]) chemicalPhrases[0]);
                    }

                    if (!isBlank(phraseString)) {
                        ds.setDanger(buildPhrase(phraseString, chemical, userData));
                    }
                }

                //P Phrases
                if (chemicalPhrases[1] != null) {
                    if (chemicalPhrases[1] instanceof String) {
                        phraseString = (String) chemicalPhrases[1];
                    } else {
                        phraseString = new String((byte[]) chemicalPhrases[1]);
                    }

                    if (!isBlank(phraseString)) {
                        ds.setPersonalProtectiveEquipment(buildPhrase(phraseString, chemical, userData));
                    }
                }

                //Q Phrases
                if (chemicalPhrases[2] != null) {
                    if (chemicalPhrases[2] instanceof String) {
                        phraseString = (String) chemicalPhrases[2];
                    } else {
                        phraseString = new String((byte[]) chemicalPhrases[2]);
                    }

                    if (!isBlank(phraseString)) {
                        ds.setEmergencyResponseEquipment(buildPhrase(phraseString, chemical, userData));
                    }
                }

                //D Phrases
                if (chemicalPhrases[3] != null) {
                    if (chemicalPhrases[3] instanceof String) {
                        phraseString = (String) chemicalPhrases[3];
                    } else {
                        phraseString = new String((byte[]) chemicalPhrases[3]);
                    }

                    if (!isBlank(phraseString)) {
                        ds.setDriverFirstAction(buildPhrase(phraseString, chemical, userData));
                    }
                }

                //S Phrases
                if (chemicalPhrases[4] != null) {
                    if (chemicalPhrases[4] instanceof String) {
                        phraseString = (String) chemicalPhrases[4];
                    } else {
                        phraseString = new String((byte[]) chemicalPhrases[4]);
                    }

                    if (!isBlank(phraseString)) {
                        ds.setDriverAdditionalAction(buildPhrase(phraseString, chemical, userData));
                    }
                }

                //F Phrases
                if (chemicalPhrases[5] != null) {
                    if (chemicalPhrases[5] instanceof String) {
                        phraseString = (String) chemicalPhrases[5];
                    } else {
                        phraseString = new String((byte[]) chemicalPhrases[5]);
                    }

                    if (!isBlank(phraseString)) {
                        ds.setDriverFireAction(buildPhrase(phraseString, chemical, userData));
                    }
                }

                //A Phrases
                if (chemicalPhrases[6] != null) {
                    if (chemicalPhrases[6] instanceof String) {
                        phraseString = (String) chemicalPhrases[6];
                    } else {
                        phraseString = new String((byte[]) chemicalPhrases[6]);
                    }

                    if (!isBlank(phraseString)) {
                        ds.setFirstAid(buildPhrase(phraseString, chemical, userData));
                    }
                }

                //E Phrases
                if (chemicalPhrases[7] != null) {
                    if (chemicalPhrases[7] instanceof String) {
                        phraseString = (String) chemicalPhrases[7];
                    } else {
                        phraseString = new String((byte[]) chemicalPhrases[7]);
                    }

                    if (!isBlank(phraseString)) {
                        ds.setInfoForEmergencyServices(buildPhrase(phraseString, chemical, userData));
                    }
                }
            }

            //Date Printed
            ds.setDatePrinted(Functions.nowDateString("dd-MM-yyyy"));
            //Reference Number
            ds.setReferenceNumber(chemical.getChemicalId() + "-" + chemical.getUnNumber() + "-" + chemical.getRecordID());

            ds.setPrintRedLines(printLines);
            dataList.add(ds);
        }
        return dataList;
    }

    private String buildPhrase(String phraseString, TRECChemicalsSuper chemical, EMCUserData userData) throws IndexOutOfBoundsException {
        EMCQuery query = new EMCQuery(enumQueryTypes.SELECT, TRECPhrases.class);
        query.openConditionBracket(EMCQueryBracketConditions.NONE);

        String[] phraseArray = phraseString.split(";");

        for (String phrase : phraseArray) {
            query.addOr("phraseId", phrase.trim());
        }

        query.closeConditionBracket();

        query.addFieldDecrypt("phrase", "tr3ck3y");//0
        query.addField("parentClass");//1
        query.addField("classSpecific");//2
        query.addField("addedPhrases");//3
        query.addField("standardPhrases");//4

        List phrasesList = util.executeNativeQuery(query, userData);

        Object[] phrase;

        StringBuilder phrasesString = new StringBuilder();

        for (Object o : phrasesList) {
            phrase = (Object[]) o;

            //Phrase is class specific and deos not match chemical class
            if ((Boolean) phrase[2] && !util.checkObjectsEqual(chemical.getClassId(), (String) phrase[1])) {
                continue;
            }

            //Phrase Is added Phrase and should only be printed if customer chose chemical
            if ((Boolean) phrase[3] && chemical instanceof TRECChemicals) {
                continue;
            }

            if (phrase[0] instanceof String) {
                phrasesString.append("&#9679").append(" ").append((String) phrase[0]).append("  ");
            } else {
                phrasesString.append("&#9679").append(" ").append(new String((byte[]) phrase[0])).append("  ");
            }
        }

        return phrasesString.toString();
    }

    private String getAppearanceString(String form, String colour, String odour, EMCUserData userData) {
        EMCQuery query;
        String appearance = "";
        if (!isBlank(form)) {
            query = new EMCQuery(enumQueryTypes.SELECT, TRECForms.class.getName());
            query.addAnd("formId", form);
            TRECForms formRec = (TRECForms) util.executeSingleResultQuery(query, userData);
            if (formRec != null) {
                appearance += formRec.getDescription() + (isBlank(colour) && isBlank(odour) ? "" : ";  ");
            }
        }
        if (!isBlank(colour)) {
            query = new EMCQuery(enumQueryTypes.SELECT, TRECColours.class.getName());
            query.addAnd("colourId", colour);
            TRECColours colourRec = (TRECColours) util.executeSingleResultQuery(query, userData);
            if (colourRec != null) {
                appearance += colourRec.getDescription() + (isBlank(odour) ? "" : ";  ");
            }
        }
        if (!isBlank(odour)) {
            query = new EMCQuery(enumQueryTypes.SELECT, TRECOdours.class.getName());
            query.addAnd("odourId", odour);
            TRECOdours odourRec = (TRECOdours) util.executeSingleResultQuery(query, userData);
            if (odourRec != null) {
                appearance += odourRec.getDescription();
            }
        }
        if (isBlank(appearance)) {
            appearance = "Not Specified";
        }
        return appearance;
    }
}
