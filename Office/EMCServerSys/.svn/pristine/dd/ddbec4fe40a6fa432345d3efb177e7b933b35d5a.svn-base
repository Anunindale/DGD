/*  * UsersBean.java * * Created on 03 August 2007, 02:16 * * To change this template, choose Tools | Template Manager * and open the template in the editor. */package emc.bus.base;import emc.bus.base.permissions.BasePermissionsTableLocal;import emc.constants.systemConstants;import emc.entity.base.BaseLicenceTable;import emc.entity.base.Usertable;import emc.entity.base.permissions.BasePermissionsTable;import emc.enums.base.licencestatus.LicenceStatus;import emc.enums.enumQueryTypes;import emc.framework.EMCEntityBean;import emc.framework.EMCEntityBeanException;import emc.framework.EMCQuery;import emc.framework.EMCUserData;import emc.functions.Functions;import emc.server.AuthorizationKeyManager;import emc.server.datehandler.EMCDateHandlerLocal;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.logging.Level;import java.util.logging.Logger;import javax.ejb.EJB;import javax.ejb.Stateless;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import javax.persistence.Query;/** * * @author Marius-Gert Coetzee */@Statelesspublic class UsersBean extends EMCEntityBean implements UsersLocal {    @EJB    private BaseLicenceLocal baseLicenceBean;    @EJB    private EMCDateHandlerLocal dateHandlerBean;    @PersistenceContext    private EntityManager em;    private int warningDays = 10;    @EJB    private BasePermissionsTableLocal permissionsBean;    /** Creates a new instance of UsersBean */    public UsersBean() {    }    public boolean init() {        Usertable globaluser = new Usertable();        try {            globaluser.setCompanyId("emc");            globaluser.setUserId("emc");            globaluser.setUserPassword("emc123");            // this.insert(globaluser);        } catch (Exception e) {        }        return true;    }    private Date getValidUntilDate() {        return Functions.string2Date(Functions.date2String(baseLicenceBean.findDefaultCompany().licenseValidUntil()), emc.constants.systemConstants.systemDateFormat());    }    //If the last login date is blank, this method will return today's date.    private Date getLastLoginDate() {        Date lastLoginDate = baseLicenceBean.findDefaultCompany().getLastLogin();        if (lastLoginDate == null) {            lastLoginDate = Functions.nowDate();        }        return Functions.string2Date(Functions.date2String(lastLoginDate), systemConstants.systemDateFormat());    }    private boolean isBackDated() {        return baseLicenceBean.findDefaultCompany().isBackDated();    }    /**     * Test the login user name and password for a company specific user     * @param userId The user name specified by the user     * @param password The password specified by the user     * @param userData  User data.  This should not have a user name at this point.     * @param companyId The company code     * @param operatingSystem Client operating system.  Used to determine file server path.  We chose not to have this in user data, as it would be redundant in most places.     * @return userData in position 0,licenceStatus in 1, licenceValidDate in 2, modules in licence in rest     */    public List testLogin(String userId, String password, EMCUserData userData) {        List ret = new ArrayList();        EMCQuery qu = new EMCQuery(enumQueryTypes.SELECT, Usertable.class.getName());        qu.addAnd("userId", userId);        qu.addAndMD5Encryption("userPassword", password);        Usertable user = (Usertable) util.executeSingleResultQuery(qu, userData);        if (user == null) {            return ret;        }        ret.add(user);        //This is important for selections        userData.setCompanyId(user.getUserCompany());        //Gets user permissions        BasePermissionsTable permissions;        try {            permissions = permissionsBean.getUserPermissions(userId, userData);        } catch (EMCEntityBeanException ex) {            Logger.getLogger("emc").log(Level.SEVERE, "Failed to find permissions for your user.", userData);            ret.remove(0);            return ret;        }        ret.add(permissions);        //Add user parameters        ret.add(getUserParameters(user, permissions));        Date validUntil = getValidUntilDate();        if (isBackDated()) {            ret.add(LicenceStatus.LICENCE_BACK_DATED.toString());        } else {            BaseLicenceTable license = baseLicenceBean.findDefaultCompany();            Date lastLogin = getLastLoginDate();            Date now = Functions.nowDate();            if (dateHandlerBean.compareDatesIgnoreTime(now, lastLogin, null) < 0) {                license.setBackDated(true);                ret.add(LicenceStatus.LICENCE_BACK_DATED.toString());            } else {                license.setLastLogin(now);                lastLogin = now;                if (!AuthorizationKeyManager.checkAuthKey(license.getAuthorizationKey())) {                    ret.add(LicenceStatus.AUTH_KEY_INVALID.toString());                } else if (dateHandlerBean.compareDatesIgnoreTime(lastLogin, validUntil, null) >= 0) {                    ret.add(LicenceStatus.LICENCE_EXPIRED.toString());                } else if (dateHandlerBean.getDateDiffInDays(Functions.nowDate(), validUntil, null) < warningDays) {                    ret.add(LicenceStatus.LICENCEWARN.toString());                } else {                    ret.add(LicenceStatus.LICENCEOK.toString());                }                em.persist(license);            }        }        //add the date.        ret.add(validUntil);        ret.addAll(baseLicenceBean.findDefaultCompany().moduleList());        return ret;    }    public boolean testAdminLogin(String userId, String password, EMCUserData userData) {        List ret = new ArrayList();        EMCQuery qu = new EMCQuery(enumQueryTypes.SELECT, Usertable.class.getName());        qu.addAnd("userId", userId);        qu.addAndMD5Encryption("userPassword", password);        Usertable user = (Usertable) util.executeSingleResultQuery(qu, null);        if (user == null) {            return false;        }        return true;    }    public List userCompanyChanged(String userId, String companyId, EMCUserData userData) {        List ret = new ArrayList();        userData.setCompanyId(companyId);        //Gets user permissions        BasePermissionsTable permissions;        try {            permissions = permissionsBean.getUserPermissions(userId, userData);        } catch (EMCEntityBeanException ex) {            Logger.getLogger("emc").log(Level.SEVERE, "Failed to find permissions for your user.", userData);            return ret;        }        ret.add(permissions);        //Add user parameters        EMCQuery qu = new EMCQuery(enumQueryTypes.SELECT, Usertable.class);        qu.addAnd("userId", userId);        Usertable user = (Usertable) util.executeSingleResultQuery(qu, userData);        ret.add(getUserParameters(user, permissions));        return ret;    }    /**     * Returns a Map containing parameters for the given user.      *      * @param user User to get parameters for.  If this is null, null will be returned from this method.     * @param operatingSystemStr Java String identifier for an operating system.     * @param userData User data.     * @return A Map containing parameters for the given user.      */    private Map<String, Object> getUserParameters(Usertable user, BasePermissionsTable permissions) {        Map<String, Object> parameters = new HashMap<String, Object>();        parameters.put("promptUpdate", user.isPromptUpdate());        parameters.put("promptDelete", user.isPromptDelete());        parameters.put("showPersonalSpaceOnOpen", user.isShowPersonalSpaceOnOpen());        parameters.put("writeLog", user.isWriteLog());        if (!isBlank(user.getLogFileName())) {            parameters.put("logFileName", user.getLogFileName());        }        parameters.put("printReportsToPDF", user.isPrintReportsToPDF());        parameters.put("showImagesOnFile", user.isShowImagesOnForm());        parameters.put("allowClone", permissions.isAllowClone());        parameters.put("allowDelete", permissions.isAllowDelete());        return parameters;    }    public boolean encryptPassword(String compId, String userId, String userPassword) {        boolean ret = false;        /*try{        Query qr = em.createNamedQuery("Usertable.encrPassword");        qr.setParameter("companyId",compId);        qr.setParameter("userId", userId);        qr.setParameter("userPassword", userPassword);        qr.setParameter("userPassword2", userPassword);        qr.executeUpdate();        ret = true;        }        catch (Exception e){}*/        return ret;    }    public int initData() {        init();        Query qr = em.createNamedQuery("Usertable.encrPassword");        qr.setParameter("companyId", "emc");        qr.setParameter("userId", "emc");        qr.setParameter("userPassword", "emc123");        qr.setParameter("userPassword2", "emc123");        qr.executeUpdate();        return 1;    }    @Override    public Object update(Object o, EMCUserData userData) throws EMCEntityBeanException {        boolean flag = false;        Usertable a = (Usertable) o;        if (a.getRecordID() != 0) {            Usertable b = em.find(Usertable.class, a.getRecordID());            if (!b.getUserPassword().equals(a.getUserPassword())) {                flag = true;            }        }        if (a.getUserPassword() == null) {            a.setUserPassword("emc123");            flag = true;        }        super.update((Object) a, userData);        if (flag) {            encryptPasswordMD5(a, userData);        }        return a;    }    @Override    public Object insert(Object o, EMCUserData userData) throws EMCEntityBeanException {        Usertable a = (Usertable) o;        if (a.getUserPassword() == null) {            a.setUserPassword("emc123");        }        super.insert((Object) a, userData);        encryptPasswordMD5(a, userData);        // encryptPassword(a.getCompanyId(), a.getUserId(), a.getUserPassword());        return a;    }    public String deleteUserData(Usertable a) {        if (a.getRecordID() != 0) {            Usertable b = em.find(Usertable.class, a.getRecordID());            em.remove(b);        }        return "Success";    }    public boolean exists(String _userId, EMCUserData userData) {        EMCUserData usertableUserData = userData.copyUserData();        String queryStr = "SELECT c.userId FROM Usertable c " +                "WHERE " +                "c.userId = '" + _userId + "' AND " +                "c.companyId = '" + usertableUserData.getCompanyId() + "'";        Query q = em.createQuery(queryStr);        if (q.getSingleResult() == null) {            return false;        } else {            return true;        }    }    public int noOfUsers(EMCUserData userData) {        Query q = em.createQuery("SELECT count(u) FROM Usertable u");        List results = q.getResultList();        return Integer.parseInt(results.get(0).toString());    }    /**     * Returns A usertable instance for the specified user id.     * @param userId User id to fetch record for.     * @param userData User data.     * @return A usertable instance for the specified user id.     */    public Usertable findUser(String userId, EMCUserData userData) {        EMCQuery query = new EMCQuery(enumQueryTypes.SELECT, Usertable.class.getName());        query.addAnd("userId", userId);        return (Usertable) util.executeSingleResultQuery(query, userData);    }    /**     * Ecrypts field to MD5 standard.     * @param table     * @param userData     */    private void encryptPasswordMD5(Usertable table, EMCUserData userData) {        EMCQuery query = new EMCQuery(enumQueryTypes.UPDATE, Usertable.class);        query.addSetMD5Encryption("userPassword", table.getUserPassword());        query.addAnd("userId", table.getUserId());        util.executeUpdate(query, userData);    }}