/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package emc.bus.base.webportal;

import emc.entity.base.webportal.BaseWebPortalUsers;
import emc.enums.base.webportalusers.WebPortalUsersReferenceType;
import emc.enums.enumQueryTypes;
import emc.framework.EMCEntityBean;
import emc.framework.EMCEntityBeanException;
import emc.framework.EMCQuery;
import emc.framework.EMCUserData;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.ejb.Stateless;

/**
 * @name        : BaseWebPortalUsersBean
 *
 * @description : Bean for the BaseWebPortalUsers entity class.
 *
 * @date        : 18 Nov 2009
 *
 * @author      : riaan
 */
@Stateless
public class BaseWebPortalUsersBean extends EMCEntityBean implements BaseWebPortalUsersLocal {

   /** Creates a new instance of BaseWebPortalUsersBean. */
    public BaseWebPortalUsersBean() {
    }

    /**
     * Attempts to log a web portal user into the system.
     *
     * @param userName User name of user to be logged in.
     * @param password User password.
     * @param userData User data.
     * @return The web portal user with the specified username and password, or null if the username/password combination was not found.
     */
    public BaseWebPortalUsers loginWebPortalUser(String userName, String password, EMCUserData userData) {
        EMCQuery query = new EMCQuery(enumQueryTypes.SELECT, BaseWebPortalUsers.class);
        query.addAnd("userId", userName);
        query.addAnd("password", password);

        return (BaseWebPortalUsers) util.executeSingleResultQuery(query, userData);
    }
    /**
     * Attempts to find a student id number or passport number;
     * @param userName
     * @param userData
     * @return id or passport or null if none found
     */
    public String getStudentIdNumber(String userName,EMCUserData userData){
        EMCQuery query = new EMCQuery(enumQueryTypes.SELECT, BaseWebPortalUsers.class);
        query.addAnd("userId", userName);

        BaseWebPortalUsers user = (BaseWebPortalUsers) util.executeSingleResultQuery(query, userData);
      
        return null;
    }

    @Override
    public Object update(Object uobject, EMCUserData userData) throws EMCEntityBeanException {
        BaseWebPortalUsers record = (BaseWebPortalUsers) uobject;
       
        return super.update(uobject, userData);
    }

    public boolean activateWebUser(long webUserRecordID, EMCUserData userData) throws EMCEntityBeanException {
        EMCQuery query = new EMCQuery(enumQueryTypes.SELECT, BaseWebPortalUsers.class);
        query.addAnd("recordID", webUserRecordID);
        BaseWebPortalUsers webUser = (BaseWebPortalUsers) util.executeSingleResultQuery(query, userData);

        if (webUser == null) {
            Logger.getLogger("emc").log(Level.SEVERE, "Failed to find Web User Record.", userData);
            return false;
        }

        webUser.setActive(true);

        update(webUser, userData);

        return true;
    }

    public boolean deactivateWebUser(long webUserRecordID, EMCUserData userData) throws EMCEntityBeanException {
        EMCQuery query = new EMCQuery(enumQueryTypes.SELECT, BaseWebPortalUsers.class);
        query.addAnd("recordID", webUserRecordID);
        BaseWebPortalUsers webUser = (BaseWebPortalUsers) util.executeSingleResultQuery(query, userData);

        if (webUser == null) {
            Logger.getLogger("emc").log(Level.SEVERE, "Failed to find Web User Record.", userData);
            return false;
        }

        webUser.setActive(false);

        update(webUser, userData);

        return true;
    }

    public boolean deactivateAllWebUsers(EMCUserData userData) throws EMCEntityBeanException {
        EMCQuery query = new EMCQuery(enumQueryTypes.SELECT, BaseWebPortalUsers.class);
        query.addAnd("active", true);
        List<BaseWebPortalUsers> webUserList = util.executeGeneralSelectQuery(query, userData);

        for (BaseWebPortalUsers webUser : webUserList) {
            webUser.setActive(false);

            update(webUser, userData);
        }

        return true;
    }
}
