/*
 * MethodMapperCodeWriter.emcJava
 *
 * Created on 08 July 2008, 09:39
 */

package emc.forms.developertools.display.methodmappercodewriter;
        
import emc.app.scrollabledesktop.BaseInternalFrame;
import emc.framework.EMCUserData;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;

/**
 *
 * @author  riaan
 */
public class MethodMapperCodeWriter extends BaseInternalFrame {
    
    /** Creates new form MethodMapperCodeWriter */
    public MethodMapperCodeWriter(EMCUserData userData) {
        super("Method Mapper Code Writer", true, true,true, true,userData);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lblTable = new emc.app.components.emcJLabel();
        txtTable = new emc.app.components.emcJTextField();
        lblBeanName = new emc.app.components.emcJLabel();
        txtBeanName = new emc.app.components.emcJTextField();
        btnMakeCode = new emc.app.components.emcJButton();
        lblMapperMethods = new emc.app.components.emcJLabel();
        txaGeneratedCode = new emc.app.components.emcJTextArea();
        generatedCodePane = new emc.app.components.emcJScrollPane(txaGeneratedCode);

        lblTable.setText("Table:");

        lblBeanName.setText("Bean Name:");

        btnMakeCode.setText("Write my Code!");
        btnMakeCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeCodeActionPerformed(evt);
            }
        });

        lblMapperMethods.setText("Method Mapper Code:");

        txaGeneratedCode.setColumns(20);
        txaGeneratedCode.setEditable(false);
        txaGeneratedCode.setRows(5);
        generatedCodePane.setViewportView(txaGeneratedCode);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTable)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTable, GroupLayout.PREFERRED_SIZE, 145, GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(lblBeanName)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBeanName, GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                            .addComponent(lblMapperMethods))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(btnMakeCode, GroupLayout.PREFERRED_SIZE, 178, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(generatedCodePane, GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTable)
                    .addComponent(txtTable, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBeanName)
                    .addComponent(txtBeanName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMakeCode)
                .addGap(13, 13, 13)
                .addComponent(lblMapperMethods)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generatedCodePane, GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void btnMakeCodeActionPerformed(java.awt.event.ActionEvent evt) {                                            
        try {
            String beanName = txtBeanName.getText();
            String table = txtTable.getText();
            
            txaGeneratedCode.setText(makeMapperCode(table, beanName));
        } catch (Exception ex) {
           
        }
    }                                           
    
    //Generate code
    private String makeMapperCode(String table, String beanName) {
        StringBuilder ret = new StringBuilder("//" + table + "\n");

        String curMethod = "INSERT_" + table.toUpperCase();
        ret.append("case " + curMethod + ": theDataList.add(" + beanName + ".insert((" + table + ")dataList.get(1), userData))" + "; break;\n");
        
        curMethod = "UPDATE_" + table.toUpperCase();
        ret.append("case " + curMethod + ": theDataList.add(" + beanName + ".update((" + table + ")dataList.get(1), userData))" + "; break;\n");
        
        curMethod = "DELETE_" + table.toUpperCase();
        ret.append("case " + curMethod + ": theDataList.add(" + beanName + ".delete((" + table + ")dataList.get(1), userData))" + "; break;\n");
        
        curMethod = "GETNUMROWS_" + table.toUpperCase();
        ret.append("case " + curMethod + ": theDataList.add(" + beanName + ".getNumRows(" + table + ".class, userData)); break;\n");
        
        curMethod = "GETDATA_" + table.toUpperCase();
        ret.append("case " + curMethod + ": \ntheDataList = (List<Object>) " + beanName + ".getDataInRange(" + table + ".class, userData, \n" +
                "Integer.parseInt(dataList.get(1).toString()), Integer.parseInt(dataList.get(2).toString()))" + "; break;\n");

        curMethod = "VALIDATEFIELD_" + table.toUpperCase();
        ret.append("case " + curMethod + ": theDataList.add(" + beanName + ".validateField(dataList.get(1).toString(), (" + table + ")dataList.get(2), userData))" + "; break;\n");
 
        return ret.toString();
    }
    
    // Variables declaration - do not modify                     
    private emc.app.components.emcJButton btnMakeCode;
    private emc.app.components.emcJScrollPane generatedCodePane;
    private emc.app.components.emcJLabel lblBeanName;
    private emc.app.components.emcJLabel lblMapperMethods;
    private emc.app.components.emcJLabel lblTable;
    private emc.app.components.emcJTextArea txaGeneratedCode;
    private emc.app.components.emcJTextField txtBeanName;
    private emc.app.components.emcJTextField txtTable;
    // End of variables declaration                   
    
}
